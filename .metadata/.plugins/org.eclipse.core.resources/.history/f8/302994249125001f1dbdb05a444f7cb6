#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definição da estrutura do carro (lista simples encadeada)
typedef struct Carro {
    int codigoSequencial;
    char placa[10];
    struct Carro *proximo;
} Carro;

// Definição da estrutura do cliente (lista duplamente encadeada)
typedef struct Cliente {
    int codigoSequencial;
    char nome[50];
    int quantidadeDeCarros;
    Carro *carros; // Lista simples encadeada de carros do cliente
    struct Cliente *anterior;
    struct Cliente *proximo;
} Cliente;

// Função para criar um novo carro e inserir no início da lista de carros do cliente
Carro* criaCarro(int codigoSequencial, char placa[]) {
    Carro *carro = (Carro*)malloc(sizeof(Carro));
    carro->codigoSequencial = codigoSequencial;
    strcpy(carro->placa, placa);
    carro->proximo = NULL;
    return carro;
}

void insereCarroInicio(Cliente *cliente, Carro *carro) {
    carro->proximo = cliente->carros;
    cliente->carros = carro;
    cliente->quantidadeDeCarros++;
}

// Função para criar um novo cliente
Cliente* criaCliente(int codigoSequencial, char nome[]) {
    Cliente *cliente = (Cliente*)malloc(sizeof(Cliente));
    cliente->codigoSequencial = codigoSequencial;
    strcpy(cliente->nome, nome);
    cliente->quantidadeDeCarros = 0;
    cliente->carros = NULL;
    cliente->anterior = NULL;
    cliente->proximo = NULL;
    return cliente;
}

// Função para inserir um cliente no fim da lista duplamente encadeada
void insereClienteFim(Cliente **inicio, Cliente **fim, Cliente *novoCliente) {
    if (*fim == NULL) { // Lista vazia
        *inicio = novoCliente;
        *fim = novoCliente;
    } else {
        (*fim)->proximo = novoCliente;
        novoCliente->anterior = *fim;
        *fim = novoCliente;
    }
}

// Função para imprimir os dados de um cliente e seus carros
void imprimeCliente(Cliente *cliente) {
    printf("Cliente: %s (Codigo: %d)\n", cliente->nome, cliente->codigoSequencial);
    printf("Quantidade de Carros: %d\n", cliente->quantidadeDeCarros);
    Carro *carro = cliente->carros;
    while (carro != NULL) {
        printf("  Carro: %s (Codigo: %d)\n", carro->placa, carro->codigoSequencial);
        carro = carro->proximo;
    }
    printf("\n");
}

// Função para imprimir todos os clientes e seus carros
void imprimeTodosClientes(Cliente *inicio) {
    Cliente *cliente = inicio;
    while (cliente != NULL) {
        imprimeCliente(cliente);
        cliente = cliente->proximo;
    }
}

// Função principal
int main() {
    Cliente *inicioClientes = NULL;
    Cliente *fimClientes = NULL;

    // Criar e adicionar clientes
    Cliente *cliente1 = criaCliente(1, "Alice");
    insereClienteFim(&inicioClientes, &fimClientes, cliente1);

    Cliente *cliente2 = criaCliente(2, "Bob");
    insereClienteFim(&inicioClientes, &fimClientes, cliente2);

    // Criar e adicionar carros para cliente1
    Carro *carro1 = criaCarro(1, "AAA1111");
    insereCarroInicio(cliente1, carro1);

    Carro *carro2 = criaCarro(2, "BBB2222");
    insereCarroInicio(cliente1, carro2);

    // Criar e adicionar carros para cliente2
    Carro *carro3 = criaCarro(3, "CCC3333");
    insereCarroInicio(cliente2, carro3);

    // Imprimir todos os clientes e seus carros
    imprimeTodosClientes(inicioClientes);

    return 0;
}
