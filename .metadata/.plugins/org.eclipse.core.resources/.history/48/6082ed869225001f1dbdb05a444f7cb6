#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definição da estrutura do carro (lista simples encadeada)
typedef struct Carro {
    int codigoSequencial;
    char placa[10];
    struct Carro *proximo;
} Carro;

// Definição da estrutura do cliente (lista duplamente encadeada)
typedef struct Cliente {
    int codigoSequencial;
    char nome[50];
    int quantidadeDeCarros;
    Carro *carros; // Lista simples encadeada de carros do cliente
    struct Cliente *anterior;
    struct Cliente *proximo;
} Cliente;

// Função para criar um novo carro e inserir no início da lista de carros do cliente
Carro* criaCarro(int codigoSequencial, char placa[]) {
    Carro *carro = (Carro*)malloc(sizeof(Carro));
    carro->codigoSequencial = codigoSequencial;
    strcpy(carro->placa, placa);
    carro->proximo = NULL;
    return carro;
}

void insereCarroInicio(Cliente *cliente, Carro *carro) {
    carro->proximo = cliente->carros;
    cliente->carros = carro;
    cliente->quantidadeDeCarros++;
}

// Função para criar um novo cliente
Cliente* criaCliente(int codigoSequencial, char nome[]) {
    Cliente *cliente = (Cliente*)malloc(sizeof(Cliente));
    cliente->codigoSequencial = codigoSequencial;
    strcpy(cliente->nome, nome);
    cliente->quantidadeDeCarros = 0;
    cliente->carros = NULL;
    cliente->anterior = NULL;
    cliente->proximo = NULL;
    return cliente;
}

// Função para inserir um cliente no fim da lista duplamente encadeada
void insereClienteFim(Cliente **inicio, Cliente **fim, Cliente *novoCliente) {
    if (*fim == NULL) { // Lista vazia
        *inicio = novoCliente;
        *fim = novoCliente;
    } else {
        (*fim)->proximo = novoCliente;
        novoCliente->anterior = *fim;
        *fim = novoCliente;
    }
}

// Função para imprimir os dados de um cliente e seus carros
void imprimeCliente(Cliente *cliente) {
    printf("Cliente: %s (Codigo: %d)\n", cliente->nome, cliente->codigoSequencial);
    printf("Quantidade de Carros: %d\n", cliente->quantidadeDeCarros);
    Carro *carro = cliente->carros;
    while (carro != NULL) {
        printf("  Carro: %s (Codigo: %d)\n", carro->placa, carro->codigoSequencial);
        carro = carro->proximo;
    }
    printf("\n");
}

// Função para imprimir todos os clientes e seus carros
void imprimeTodosClientes(Cliente *inicio) {
    Cliente *cliente = inicio;
    while (cliente != NULL) {
        imprimeCliente(cliente);
        cliente = cliente->proximo;
    }
}

// Função principal
int main() {
    Cliente *inicioClientes = NULL;
    Cliente *fimClientes = NULL;
    char opcao;
    int codigoCliente = 1;
//   int codigoCarro;

    do {
        printf("Menu:\n");
        printf("A. Adicionar Cliente\n");
        printf("B. Adicionar Carro a um Cliente\n");
        printf("C. Listar Clientes e seus Carros\n");
        printf("D. Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%c", &opcao);
        getchar();

        switch (opcao) {
            case 'A': {
                char nome[50];
                printf("Digite o nome do cliente: ");
                scanf("%s", nome);
                Cliente *novoCliente = criaCliente(codigoCliente++, nome);
                insereClienteFim(&inicioClientes, &fimClientes, novoCliente);
                break;
            }
            case 'B': {
                int clienteCodigo;
                printf("Digite o codigo do cliente: ");
                scanf("%d", &clienteCodigo);
                Cliente *cliente = inicioClientes;
                while (cliente != NULL && cliente->codigoSequencial != clienteCodigo) {
                    cliente = cliente->proximo;
                }
                if (cliente != NULL) {
                    char placa[10];
                    printf("Digite a placa do carro: ");
                    scanf("%s", placa);
                    Carro *novoCarro = criaCarro(cliente->quantidadeDeCarros + 1, placa);
                    insereCarroInicio(cliente, novoCarro);
                } else {
                    printf("Cliente com codigo %d nao encontrado.\n", clienteCodigo);
                }
                break;
            }
            case 'C':
                imprimeTodosClientes(inicioClientes);
                break;
            case 'D':
                printf("Saindo...\n");
                break;
            default:
                printf("Opcao invalida!\n");
        }
    } while (opcao != 'D');

    return 0;
}
